# -*- coding: utf-8 -*-
"""Dados_Desbalanceados_Exercicios.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15ds3ZtdFL_h93YczGiS1q6qHomQMl0A0

# Classificação com Dados Desbalanceados

## Carregamento de base de dados
"""

import pandas as pd 
import numpy as np
import seaborn as sns
import random
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from imblearn.under_sampling import TomekLinks
from imblearn.over_sampling import SMOTE

dataset = pd.read_csv('csv_result-ebay_confianca_completo.csv')

dataset.shape

dataset.head()

dataset['blacklist'] = dataset['blacklist'] == 'S'

sns.countplot(dataset['reputation']);

len(dataset.columns)

X = dataset.iloc[:, 0:74].values

X.shape

X

y = dataset.iloc[:, 74].values

y

np.unique(y, return_counts=True)

"""## Base de treinamento e teste"""

X_treinamento, X_teste, y_treinamento, y_teste = train_test_split(X, y, test_size = 0.2, stratify = y)

X_treinamento.shape, y_treinamento.shape

X_teste.shape, y_teste.shape

"""## Classificação com Random Forest"""

modelo = RandomForestClassifier()
modelo.fit(X_treinamento, y_treinamento)

previsoes = modelo.predict(X_teste)
accuracy_score(previsoes, y_teste)

"""## Subamostragem (undersampling) - Tomek Links"""

tl = TomekLinks(sampling_strategy='majority')
X_under, y_under = tl.fit_resample(X, y)

X_under.shape, y_under.shape

np.unique(y, return_counts=True)

np.unique(y_under, return_counts=True)

X_treinamento_u, X_teste_u, y_treinamento_u, y_teste_u = train_test_split(X_under, y_under,
                                                                          test_size = 0.2,
                                                                          stratify = y_under)
X_treinamento_u.shape , X_teste_u.shape

modelo_u = RandomForestClassifier()
modelo_u.fit(X_treinamento_u, y_treinamento_u)
previsoes_u = modelo_u.predict(X_teste_u)
accuracy_score(previsoes_u, y_teste_u)

"""## Sobreamostragem (oversampling) - SMOTE"""

smote = SMOTE(sampling_strategy='minority')
X_over, y_over = smote.fit_resample(X, y)

X_over.shape, y_over.shape

np.unique(y, return_counts=True)

np.unique(y_over, return_counts=True)

X_treinamento_o, X_teste_o, y_treinamento_o, y_teste_o = train_test_split(X_over, y_over,
                                                                          test_size = 0.2,
                                                                          stratify = y_over)
X_treinamento_o.shape, X_teste_o.shape

modelo_o = RandomForestClassifier()
modelo_o.fit(X_treinamento_o, y_treinamento_o)
previsoes_o = modelo_o.predict(X_teste_o)
accuracy_score(previsoes_o, y_teste_o)

