# -*- coding: utf-8 -*-
"""busca_sem_informacao_completo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RpW9a4OLdhIF8b3ZKoZ_v0NRWWqxkz2C
"""

class Cidade:
    def __init__(self, nome):
        self.nome = nome
        self.visitado = False
        self.adjacentes = []

    def addCidadeAdjacente(self, cidade):
        self.adjacentes.append(cidade)

class Adjacente:
    def __init__(self, cidade):
        self.cidade = cidade

class Mapa:
    portoUniao = Cidade("Porto União")
    pauloFrontim = Cidade("Paulo Frontim")
    irati = Cidade("Irati")
    canoinhas = Cidade("Canoinhas")
    palmeira = Cidade("Palmeira")
    campoLargo = Cidade("Campo Largo")
    curitiba = Cidade("Curitiba")
    balsaNova = Cidade("Balsa Nova")
    araucaria = Cidade("Araucária")
    saoJose = Cidade("São José dos Pinhais")
    contenda = Cidade("Contenda")
    mafra = Cidade("Mafra")
    tijucas = Cidade("Tijucas")
    lapa = Cidade("Lapa")
    saoMateus = Cidade("São Mateus do Sul")
    tresBarras = Cidade("Três Barras")

    portoUniao.addCidadeAdjacente(Adjacente(pauloFrontim))
    portoUniao.addCidadeAdjacente(Adjacente(canoinhas))
    portoUniao.addCidadeAdjacente(Adjacente(saoMateus))

    pauloFrontim.addCidadeAdjacente(Adjacente(portoUniao))
    pauloFrontim.addCidadeAdjacente(Adjacente(irati))

    irati.addCidadeAdjacente(Adjacente(pauloFrontim))
    irati.addCidadeAdjacente(Adjacente(saoMateus))
    irati.addCidadeAdjacente(Adjacente(palmeira))

    palmeira.addCidadeAdjacente(Adjacente(irati))
    palmeira.addCidadeAdjacente(Adjacente(saoMateus))
    palmeira.addCidadeAdjacente(Adjacente(campoLargo))

    campoLargo.addCidadeAdjacente(Adjacente(palmeira))
    campoLargo.addCidadeAdjacente(Adjacente(balsaNova))
    campoLargo.addCidadeAdjacente(Adjacente(curitiba))

    curitiba.addCidadeAdjacente(Adjacente(campoLargo))
    curitiba.addCidadeAdjacente(Adjacente(balsaNova))
    curitiba.addCidadeAdjacente(Adjacente(araucaria))
    curitiba.addCidadeAdjacente(Adjacente(saoJose))

    balsaNova.addCidadeAdjacente(Adjacente(curitiba))
    balsaNova.addCidadeAdjacente(Adjacente(campoLargo))
    balsaNova.addCidadeAdjacente(Adjacente(contenda))

    araucaria.addCidadeAdjacente(Adjacente(curitiba))
    araucaria.addCidadeAdjacente(Adjacente(contenda))

    saoJose.addCidadeAdjacente(Adjacente(curitiba))
    saoJose.addCidadeAdjacente(Adjacente(contenda))

    contenda.addCidadeAdjacente(Adjacente(balsaNova))
    contenda.addCidadeAdjacente(Adjacente(araucaria))
    contenda.addCidadeAdjacente(Adjacente(lapa))

    mafra.addCidadeAdjacente(Adjacente(tijucas))
    mafra.addCidadeAdjacente(Adjacente(lapa))
    mafra.addCidadeAdjacente(Adjacente(canoinhas))

    tijucas.addCidadeAdjacente(Adjacente(mafra))
    tijucas.addCidadeAdjacente(Adjacente(saoJose))

    lapa.addCidadeAdjacente(Adjacente(contenda))
    lapa.addCidadeAdjacente(Adjacente(saoMateus))
    lapa.addCidadeAdjacente(Adjacente(mafra))

    saoMateus.addCidadeAdjacente(Adjacente(palmeira))
    saoMateus.addCidadeAdjacente(Adjacente(irati))
    saoMateus.addCidadeAdjacente(Adjacente(lapa))
    saoMateus.addCidadeAdjacente(Adjacente(portoUniao))

    tresBarras.addCidadeAdjacente(Adjacente(saoMateus))
    tresBarras.addCidadeAdjacente(Adjacente(canoinhas))

mapa = Mapa()

class Pilha:
    def __init__(self, tamanho):
        self.tamanho = tamanho
        self.cidades = [None] * self.tamanho
        self.topo = -1

    def empilhar(self, cidade):
        if not Pilha.pilhaCheia(self):
            self.topo += 1
            self.cidades[self.topo] = cidade
        else:
            print("A pilha já está cheia")

    def desempilhar(self):
        if not Pilha.pilhaVazia(self):
            temp = self.cidades[self.topo]
            self.topo -= 1
            return temp
        else:
            print("A pilha já está vazia")
            return None

    def getTopo(self):
        return self.cidades[self.topo]

    def pilhaVazia(self):
        return (self.topo == - 1)

    def pilhaCheia(self):
        return (self.topo == self.tamanho - 1)

for i in range(len(mapa.portoUniao.adjacentes)):
    print(mapa.portoUniao.adjacentes[i].cidade.nome)

pilha = Pilha(5)
pilha.empilhar(mapa.portoUniao)
pilha.empilhar(mapa.campoLargo)
pilha.empilhar(mapa.canoinhas)
pilha.getTopo().nome

pilha.desempilhar()
pilha.empilhar(mapa.curitiba)
pilha.getTopo().nome

class Profundidade:
    def __init__(self, inicio, objetivo):
        self.inicio = inicio
        self.inicio.visitado = True
        self.objetivo = objetivo
        self.fronteira = Pilha(20)
        self.fronteira.empilhar(inicio)
        self.achou = False

    def buscar(self):
        topo = self.fronteira.getTopo()
        print(f'Topo: {topo.nome}')

        if topo == self.objetivo:
            self.achou = True
        else:
            for a in topo.adjacentes:
                if self.achou == False:
                    print(f'Verificando se já visitado: {a.cidade.nome}')
                    if a.cidade.visitado == False:
                        a.cidade.visitado = True
                        self.fronteira.empilhar(a.cidade)
                        Profundidade.buscar(self)
        print(f'Desempilhou: {self.fronteira.desempilhar().nome}')

mapa = Mapa()
profundidade = Profundidade(mapa.portoUniao, mapa.curitiba)
profundidade.buscar()

class Fila:
    def __init__(self, tamanho):
        self.tamanho = tamanho
        self.cidades = [None] * self.tamanho
        self.inicio = 0
        self.fim = -1
        self.numeroElementos = 0

    def enfileirar(self, cidade):
        if not Fila.filaCheia(self):
            if self.fim == self.tamanho - 1:
                self.fim = -1
            self.fim += 1
            self.cidades[self.fim] = cidade
            self.numeroElementos += 1
        else:
            print("A fila já está cheia")

    def desenfileirar(self):
        if not Fila.filaVazia(self):
            temp = self.cidades[self.inicio]
            self.inicio += 1
            if self.inicio == self.tamanho:
                self.inicio = 0
            self.numeroElementos -= 1
            return temp
        else:
            print("A fila já está vazia")
            return None

    def getPrimeiro(self):
        return self.cidades[self.inicio]

    def filaVazia(self):
        return self.numeroElementos == 0

    def filaCheia(self):
        return self.numeroElementos == self.tamanho

mapa = Mapa()
fila = Fila(5)

fila.enfileirar(mapa.canoinhas)
fila.enfileirar(mapa.irati)
fila.enfileirar(mapa.balsaNova)
fila.getPrimeiro().nome

fila.desenfileirar()
fila.getPrimeiro().nome

class Largura:
    def __init__(self, inicio, objetivo):
        self.inicio = inicio
        self.inicio.visitado = True
        self.objetivo = objetivo
        self.fronteira = Fila(20)
        self.fronteira.enfileirar(inicio)
        self.achou = False

    def buscar(self):
        primeiro = self.fronteira.getPrimeiro()
        print(f'Primeiro: {primeiro.nome}')

        if primeiro == self.objetivo:
            self.achou = True
        else:
            temp = self.fronteira.desenfileirar()
            print(f'Desenfileirou: {temp.nome}')
            for a in primeiro.adjacentes:
                print(f'Verificando se já visitado: {a.cidade.nome}')
                if a.cidade.visitado == False:
                    a.cidade.visitado = True
                    self.fronteira.enfileirar(a.cidade)
            if self.fronteira.numeroElementos > 0:
                Largura.buscar(self)

mapa = Mapa()
largura = Largura(mapa.portoUniao, mapa.irati)
largura.buscar()

